<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Example Load Test" enabled="true">
      <stringProp name="TestPlan.comments">This is a browser-based web application load testing.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Application" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="URL" elementType="Argument">
            <stringProp name="Argument.name">URL</stringProp>
            <stringProp name="Argument.value">https://the-internet.herokuapp.com/login</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APP_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">APP_USERNAME</stringProp>
            <stringProp name="Argument.value">tomsmith</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APP_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">APP_PASSWORD</stringProp>
            <stringProp name="Argument.value">SuperSecretPassword!</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - General" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SCREENSHOT_LOCATION" elementType="Argument">
            <stringProp name="Argument.name">SCREENSHOT_LOCATION</stringProp>
            <stringProp name="Argument.value">./</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Specify the location of screenshots</stringProp>
          </elementProp>
          <elementProp name="WAIT_TIME" elementType="Argument">
            <stringProp name="Argument.name">WAIT_TIME</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">The maximum page element wait time</stringProp>
          </elementProp>
          <elementProp name="SLEEP_TIME" elementType="Argument">
            <stringProp name="Argument.name">SLEEP_TIME</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">The maximum random wait time within the sampler</stringProp>
          </elementProp>
          <elementProp name="MAXIMUM_DELAY_TIME" elementType="Argument">
            <stringProp name="Argument.name">MAXIMUM_DELAY_TIME</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">The maximum user pause time between each sampler</stringProp>
          </elementProp>
          <elementProp name="CONSTANT_DELAY_TIME" elementType="Argument">
            <stringProp name="Argument.name">CONSTANT_DELAY_TIME</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">The constant user pause time between each sampler</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Browser Driver" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SELENIUM_GRID_HOST" elementType="Argument">
            <stringProp name="Argument.name">SELENIUM_GRID_HOST</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CHROME_DRIVER_LOCATION" elementType="Argument">
            <stringProp name="Argument.name">CHROME_DRIVER_LOCATION</stringProp>
            <stringProp name="Argument.value">C:/selenium/webdrivers/chromedriver.exe</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">ONLY for Chrome Driver Config in Windows</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.RemoteDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig" testname="jp@gc - Remote Driver Config" enabled="true">
        <stringProp name="RemoteDriverConfig.general.selenium.grid.url">http://${SELENIUM_GRID_HOST}:4444/wd/hub</stringProp>
        <stringProp name="RemoteDriverConfig.general.selenium.capability">CHROME</stringProp>
        <stringProp name="RemoteDriverConfig.general.selenium.file.detector">USELESS</stringProp>
      </com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig>
      <hashTree/>
      <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="false">
        <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
        <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
        <stringProp name="WebDriverConfig.http_host"></stringProp>
        <intProp name="WebDriverConfig.http_port">8080</intProp>
        <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
        <stringProp name="WebDriverConfig.https_host"></stringProp>
        <intProp name="WebDriverConfig.https_port">8080</intProp>
        <stringProp name="WebDriverConfig.ftp_host"></stringProp>
        <intProp name="WebDriverConfig.ftp_port">8080</intProp>
        <stringProp name="WebDriverConfig.socks_host"></stringProp>
        <intProp name="WebDriverConfig.socks_port">8080</intProp>
        <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
        <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
        <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
        <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
        <stringProp name="ChromeDriverConfig.chromedriver_path">${CHROME_DRIVER_LOCATION}</stringProp>
        <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
        <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
        <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
      </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Page Elements" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ELEMENT_TEXT_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">ELEMENT_TEXT_USERNAME</stringProp>
            <stringProp name="Argument.value">pkg.By.id(&quot;username&quot;)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ELEMENT_TEXT_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">ELEMENT_TEXT_PASSWORD</stringProp>
            <stringProp name="Argument.value">pkg.By.id(&quot;password&quot;)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ELEMENT_BUTTON_LOGIN" elementType="Argument">
            <stringProp name="Argument.name">ELEMENT_BUTTON_LOGIN</stringProp>
            <stringProp name="Argument.value">pkg.By.cssSelector(&quot;button[class=&apos;radius&apos;]&quot;)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ELEMENT_LINK_LOGOUT" elementType="Argument">
            <stringProp name="Argument.name">ELEMENT_LINK_LOGOUT</stringProp>
            <stringProp name="Argument.value">pkg.By.cssSelector(&quot;a[class=&apos;button secondary radius&apos;]&quot;)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">30</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Delay Timer Random" enabled="true">
          <stringProp name="ConstantTimer.delay">${CONSTANT_DELAY_TIME}</stringProp>
          <stringProp name="RandomTimer.range">${MAXIMUM_DELAY_TIME}</stringProp>
          <stringProp name="TestPlan.comments">To allow random pausing between each request to simulate real-life user behaviour</stringProp>
        </UniformRandomTimer>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64; Trident/7.0; rv:11.0) like Gecko</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">image/gif, image/jpeg, image/pjpeg, application/x-ms-application, application/xaml+xml, application/x-ms-xbap, */*</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-MY</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart()
 try{ 
    WDS.browser.get(&quot;${URL}&quot;);

    var pkg = JavaImporter(org.openqa.selenium);
    var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
    var ui = JavaImporter(org.openqa.selenium.support.ui);
    var wait = new support_ui.WebDriverWait(WDS.browser, ${WAIT_TIME});
    var exception = null;

    var fileUtils = JavaImporter(org.apache.commons.io);
    var io = JavaImporter(java.io);
    var location = &quot;${SCREENSHOT_LOCATION}/&quot; //&apos;C:/selenium/webdrivers/&apos;;
    var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE);

    // To maxmize the browser window that&apos;s needed when using remote driver config
    WDS.browser.manage().window().setSize(new pkg.Dimension(1920, 1080));  
		
    wait.until(ui.ExpectedConditions.visibilityOfElementLocated(${ELEMENT_TEXT_USERNAME}));
    WDS.browser.findElement(${ELEMENT_TEXT_USERNAME}).click();
    WDS.browser.findElement(${ELEMENT_TEXT_USERNAME}).sendKeys(&quot;${APP_USERNAME}&quot;);
    
    wait.until(ui.ExpectedConditions.visibilityOfElementLocated(${ELEMENT_TEXT_PASSWORD}));
    WDS.browser.findElement(${ELEMENT_TEXT_PASSWORD}).click();
    WDS.browser.findElement(${ELEMENT_TEXT_PASSWORD}).sendKeys(&quot;${APP_PASSWORD}&quot;);	
    
    wait.until(ui.ExpectedConditions.visibilityOfElementLocated(${ELEMENT_BUTTON_LOGIN}));
    WDS.browser.findElement(${ELEMENT_BUTTON_LOGIN}).click();   
    WDS.log.info(&quot;${CURRENT_TIME}:You&apos;ve clicked on login button.&quot;);
    
    wait.until(ui.ExpectedConditions.visibilityOfElementLocated(${ELEMENT_LINK_LOGOUT}));
    WDS.log.info(&quot;${CURRENT_TIME}:You&apos;ve sucessfully logged in button.&quot;);
    
    WDS.log.info(&quot;${__samplerName()}-${__threadNum}.Randomly sleep for ${SLEEP_TIME_RANDOM} miliseconds&quot;);
    java.lang.Thread.sleep(&quot;${SLEEP_TIME_RANDOM}&quot;);
            
} catch(err){
   WDS.log.error(&quot;${CURRENT_TIME}: &quot;+err.message);   
   fileUtils.FileUtils.copyFile(screenshot, new io.File(location+&quot;screenshot-${CURRENT_TIME}-${__samplerName()}.png&quot;));
   exception = err;
} finally {
    if (exception != null){
    	throw (exception);
    }
}
WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script"> import java.text.SimpleDateFormat
 
 // For Windows, need to convert backslash to forward slash
 ${__groovy(vars.put(&apos;SCREENSHOT_LOCATION&apos;\,vars.get(&apos;SCREENSHOT_LOCATION&apos;).replace(&apos;\\\&apos;\, &apos;/&apos;)),)}
 
String location = vars.get(&apos;SCREENSHOT_LOCATION&apos;)
//log.info (&quot;SCREENSHOT_LOCATION:&quot;+location);

// Generate uniqte id for screenshot naming based on date time and iteration number
Date date = new Date()
String dateTime = date.format(&quot;yyyyMMddHHmmss&quot;)
String threadNumber = ${__threadNum}
String iteration = vars.getIteration()

String currentTime = threadNumber+&quot;-&quot;+iteration+&quot;-&quot;+dateTime
//log.info (&quot;SCREENSHOT SUFFIX: &quot;+currentTime);

// Set the variable value to be used for screenshot naming
vars.put(&quot;CURRENT_TIME&quot;, currentTime)

//log.info (&quot;SCREENSHOT MAXIMUM_DELAY_TIME: &quot;+${MAXIMUM_DELAY_TIME});
// Set random sleep timer for each request that use this variable
String randomSleepTime = ${__Random(1000,${MAXIMUM_DELAY_TIME})}
vars.put(&quot;SLEEP_TIME_RANDOM&quot;, randomSleepTime)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Logout" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart()
try {
    var pkg = JavaImporter(org.openqa.selenium);
    var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
    var ui = JavaImporter(org.openqa.selenium.support.ui);
    var wait = new support_ui.WebDriverWait(WDS.browser, ${WAIT_TIME});
    var exception = null;

    var fileUtils = JavaImporter(org.apache.commons.io);
    var io = JavaImporter(java.io);
    var location = &quot;${SCREENSHOT_LOCATION}/&quot; //&apos;C:/selenium/webdrivers/&apos;;
    var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE);

    // Click on Logout
    wait.until(ui.ExpectedConditions.visibilityOfElementLocated(${ELEMENT_LINK_LOGOUT}));
    WDS.browser.findElement(${ELEMENT_LINK_LOGOUT}).click();  

    // Wait until successfully logged out
    wait.until(ui.ExpectedConditions.visibilityOfElementLocated(${ELEMENT_BUTTON_LOGIN}));

    WDS.log.info(&quot;${__samplerName()}-${__threadNum}.Randomly sleep for ${SLEEP_TIME_RANDOM} miliseconds&quot;);
    java.lang.Thread.sleep(&quot;${SLEEP_TIME_RANDOM}&quot;);
    
} catch(err){
   WDS.log.error(&quot;${CURRENT_TIME}: &quot;+err.message);   
   fileUtils.FileUtils.copyFile(screenshot, new io.File(location+&quot;screenshot-${CURRENT_TIME}-${__samplerName()}.png&quot;));
   exception = err;
} finally {
    if (exception != null){
    	throw (exception);
    }
}

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
